# -*- coding: utf-8 -*-
"""sys 611 - hw 01

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rxOMITjluLWBMxh3ZByQTe-4ZrGO3Pro
"""

# from __future__ import absolute_import, division, print_function
import pandas as pd

state = [
         [" "," "," "],
         [" "," "," "],
         [" "," "," "]
]

def reset_game():
  for i in range(3):
    for j in range(3):
      state[i][j] = " "

def is_valid(row,col):
  return state[row][col] == " "

def mark_x(row,col):
  if is_valid(row,col):
    state[row][col] = "x"

def mark_o(row,col):
  if is_valid(row,col):
    state[row][col] = "o"

def show_grid():
  print(pd.DataFrame(state))

def get_winner(state):
  for row in state: # check horizontal rows
    if row[0] == row[1] == row[2]:
      return row[0]
      
  for col in range(3):
    if state[0][col] == state[1][col] == state[2][col]: # checks columns
      return state[0][col]

  if state[0][0] == state[1][1] == state[2][2]: # downwards diagonal positions
    return state[0][0] # equals the mark at space 0,0
  
  if state[0][2] == state[1][1] == state[2][0]: # upwards diagonal positions
    return state[0][0] # equals the mark at space 0,0

  return "" # return blank string as per instructions

    
def is_tie():
  for row in state:
    if " " in row:
      return False
    else:
      return True

def main():

  mark_x(1, 1)
  show_grid()
  mark_o(0, 2)
  show_grid()
  mark_x(0, 0)
  show_grid()
  mark_x(2, 2)
  mark_o(2,1)
  show_grid()
  print("winner is: " + get_winner(state))
  is_tie()

if __name__ == "__main__":
    main()

